# -*- coding: utf-8 -*-
"""Histogram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QTxrDUTCrUwvG4l7GuuXpOGdekDVj4HY
"""

!pip install numba
!pip install scikit-cuda

import numpy as np
import cv2
import numba
from numba import cuda
import matplotlib.pyplot as plt

# Wczytaj obraz
image_path = 'zmienione_rozmiary/obraz_1.jpg'
image = cv2.imread(image_path)

# Funkcja do generowania histogramu za pomocą CUDA
@cuda.jit
def compute_histogram(image, histogram):
    x, y, _ = cuda.grid(3)  # Zmiana liczby wymiarów

    if x < image.shape[0] and y < image.shape[1]:
        pixel_value = image[x, y, 0]  # Użyj tylko jednego kanału (czerwony, na przykład)
        cuda.atomic.add(histogram, pixel_value, 1)

# Konfiguracja rozmiaru bloku i siatki CUDA
threadsperblock = (16, 16, 1)  # Dodatkowy wymiar
blockspergrid_x = int(np.ceil(image.shape[0] / threadsperblock[0]))
blockspergrid_y = int(np.ceil(image.shape[1] / threadsperblock[1]))
blockspergrid = (blockspergrid_x, blockspergrid_y, 1)

# Inicjalizacja histogramu na GPU
d_histogram = cuda.to_device(np.zeros(256, dtype=np.int32))

# Wywołaj funkcję CUDA do generowania histogramu
compute_histogram[blockspergrid, threadsperblock](image, d_histogram)

# Skopiuj wynik histogramu z powrotem na CPU
h_histogram = d_histogram.copy_to_host()

# Wyświetl oryginalny obraz
plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')

# Wyświetl histogram
plt.subplot(1, 2, 2)
plt.bar(range(256), h_histogram, color='gray', alpha=0.7)
plt.title('Histogram')

plt.show()